name: Kevvy CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ] # Trigger on version tags like v0.1.0, v1.2.3
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Use the Python version matching your project
        python-version: ['3.12'] 

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true # Easier for caching and finding the env
        installer-parallel: true

    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        # Use poetry cache if virtualenvs-in-project: true is problematic
        # cache: 'poetry' 
        # cache-dependency-path: 'poetry.lock'
        # If using virtualenvs-in-project=true, cache the .venv dir instead
        cache: 'pip' # Cache pip deps installed by Poetry
        cache-dependency-path: .venv # Path to the virtual env dir created by Poetry

    - name: Install dependencies via Poetry (including dev)
      run: poetry install --no-interaction --with dev

    - name: Run tests with pytest
      # Use the virtual env path if poetry run has issues in CI
      # run: source .venv/bin/activate && pytest -v
      run: poetry run pytest -v

  build-and-publish-docker:
    name: Build and Publish Docker Image
    needs: test # Only run if tests pass
    if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags
    runs-on: ubuntu-latest
    permissions:
      packages: write # Needed to push to GHCR
      contents: read # Needed to check out code

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }} # Use repository name directly
          # Extract version tag from Git ref (e.g., v1.2.3 -> 1.2.3)
          # Also add 'latest' tag if pushing from main branch (optional)
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Build from the root directory where Dockerfile is
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
